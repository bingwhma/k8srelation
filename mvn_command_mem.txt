mvn archetype:generate -DgroupId=jp.co.kddi.nemo -DartifactId=gui -DarchetypeArtifactId=maven-archetype-webapp

mvn archetype:generate -DgroupId=com.linyi.imap -DartifactId=ImapJavaSampler -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

mvn eclipse:eclipse

mvn eclipse:eclipse -Dwtp.version=2.0

mvn dependency:tree

mvn -v //查看版本  
mvn archetype:create //创建 Maven 项目  
mvn compile //编译源代码  
mvn test-compile //编译测试代码  
mvn test //运行应用程序中的单元测试  
mvn site //生成项目相关信息的网站  
mvn package //依据项目生成 jar 文件  
mvn install //在本地 Repository 中安装 jar  
mvn -Dmaven.test.skip=true //忽略测试文档编译  
mvn clean //清除目标目录中的生成结果  
mvn clean compile //将.java类编译为.class文件  
mvn clean package //进行打包  
mvn clean test //执行单元测试  
mvn clean deploy //部署到版本仓库  
mvn clean install //使其他项目使用这个jar,会安装到maven本地仓库中  
mvn archetype:generate //创建项目架构  
mvn dependency:list //查看已解析依赖  
mvn dependency:tree //看到依赖树  
mvn dependency:analyze //查看依赖的工具  
mvn help:system //从中央仓库下载文件至本地仓库  
mvn help:active-profiles //查看当前激活的profiles  
mvn help:all-profiles //查看所有profiles  
mvn help:effective -pom //查看完整的pom信息 

mvn dependency:resolve -U 

You probably then want to clean and install again:
mvn dependency:purge-local-repository clean install

1.compile：默认值 他表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去
2.test：依赖项目仅仅参与测试相关的工作，包括测试代码的编译和执行，不会被打包，例如：junit
3.runtime：表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段
4.provided：打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作
5.system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径


